{"version":3,"file":"src_index_ts.js","sources":["./src/client.ts","./src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\n\r\nexport interface AuthConfig {\r\n  nearSignature: string;\r\n  accountId: string;\r\n  baseUrl?: string;\r\n}\r\n\r\nexport interface HealthResponse {\r\n  status: 'ok' | 'error';\r\n  message: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface RateLimitInfo {\r\n  limit: number;\r\n  remaining: number;\r\n  reset: number;\r\n  retryAfter?: number;\r\n}\r\n\r\nexport interface RateLimitsResponse {\r\n  global: RateLimitInfo;\r\n  endpoints: Record<string, RateLimitInfo>;\r\n}\r\n\r\nexport interface EndpointRateLimitResponse {\r\n  endpoint: string;\r\n  limit: RateLimitInfo;\r\n}\r\n\r\n// ===== AUTH API INTERFACES =====\r\n\r\nexport interface ConnectedAccount {\r\n  id: string;\r\n  platform: string;\r\n  username: string;\r\n  displayName: string;\r\n  avatar?: string;\r\n  isActive: boolean;\r\n  connectedAt: string;\r\n  lastUsedAt?: string;\r\n}\r\n\r\nexport interface AuthStatus {\r\n  isAuthenticated: boolean;\r\n  accountId: string;\r\n  connectedAccounts: ConnectedAccount[];\r\n  permissions: string[];\r\n  expiresAt?: string;\r\n}\r\n\r\nexport interface NearAuthorizationStatus {\r\n  isAuthorized: boolean;\r\n  accountId: string;\r\n  permissions: string[];\r\n  expiresAt?: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  success: boolean;\r\n  token?: string;\r\n  accountId: string;\r\n  expiresAt?: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface RefreshTokenResponse {\r\n  success: boolean;\r\n  token: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface ProfileData {\r\n  accountId: string;\r\n  displayName: string;\r\n  avatar?: string;\r\n  bio?: string;\r\n  connectedAccounts: ConnectedAccount[];\r\n  stats: {\r\n    totalPosts: number;\r\n    totalLikes: number;\r\n    totalReposts: number;\r\n  };\r\n}\r\n\r\n// ===== POST API INTERFACES =====\r\n\r\nexport interface MediaItem {\r\n  type: 'image' | 'video' | 'audio' | 'document';\r\n  url: string;\r\n  thumbnail?: string;\r\n  alt?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface PostContent {\r\n  text: string;\r\n  media?: MediaItem[];\r\n  hashtags?: string[];\r\n  mentions?: string[];\r\n  links?: string[];\r\n}\r\n\r\nexport interface CreatePostRequest {\r\n  content: PostContent;\r\n  platforms: string[];\r\n  scheduledAt?: string;\r\n  visibility?: 'public' | 'followers' | 'private';\r\n  replySettings?: 'everyone' | 'mentioned' | 'followers';\r\n}\r\n\r\nexport interface Post {\r\n  id: string;\r\n  content: PostContent;\r\n  author: {\r\n    accountId: string;\r\n    displayName: string;\r\n    avatar?: string;\r\n  };\r\n  platforms: string[];\r\n  status: 'draft' | 'scheduled' | 'published' | 'failed';\r\n  createdAt: string;\r\n  publishedAt?: string;\r\n  scheduledAt?: string;\r\n  visibility: 'public' | 'followers' | 'private';\r\n  replySettings: 'everyone' | 'mentioned' | 'followers';\r\n  stats: {\r\n    likes: number;\r\n    reposts: number;\r\n    replies: number;\r\n    views?: number;\r\n  };\r\n  engagement: {\r\n    isLiked: boolean;\r\n    isReposted: boolean;\r\n    isBookmarked: boolean;\r\n  };\r\n}\r\n\r\nexport interface CreatePostResponse {\r\n  success: boolean;\r\n  post: Post;\r\n  message?: string;\r\n}\r\n\r\nexport interface RepostRequest {\r\n  originalPostId: string;\r\n  platforms: string[];\r\n  comment?: string;\r\n}\r\n\r\nexport interface QuotePostRequest {\r\n  originalPostId: string;\r\n  content: PostContent;\r\n  platforms: string[];\r\n}\r\n\r\nexport interface ReplyToPostRequest {\r\n  originalPostId: string;\r\n  content: PostContent;\r\n  platforms: string[];\r\n}\r\n\r\nexport interface LikePostRequest {\r\n  postId: string;\r\n  platforms: string[];\r\n}\r\n\r\nexport interface DeletePostRequest {\r\n  postId: string;\r\n  platforms: string[];\r\n}\r\n\r\n// ===== ACTIVITY API INTERFACES =====\r\n\r\nexport interface LeaderboardEntry {\r\n  rank: number;\r\n  accountId: string;\r\n  displayName: string;\r\n  avatar?: string;\r\n  score: number;\r\n  stats: {\r\n    posts: number;\r\n    likes: number;\r\n    reposts: number;\r\n    replies: number;\r\n  };\r\n  change: {\r\n    direction: 'up' | 'down' | 'same';\r\n    value: number;\r\n  };\r\n}\r\n\r\nexport interface LeaderboardResponse {\r\n  period: 'daily' | 'weekly' | 'monthly' | 'all-time';\r\n  entries: LeaderboardEntry[];\r\n  totalParticipants: number;\r\n  lastUpdated: string;\r\n}\r\n\r\nexport interface ActivityItem {\r\n  id: string;\r\n  type: 'post' | 'like' | 'repost' | 'reply' | 'follow' | 'mention';\r\n  actor: {\r\n    accountId: string;\r\n    displayName: string;\r\n    avatar?: string;\r\n  };\r\n  target?: {\r\n    type: 'post' | 'user';\r\n    id: string;\r\n    content?: string;\r\n  };\r\n  content?: string;\r\n  platforms: string[];\r\n  timestamp: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface AccountActivityResponse {\r\n  accountId: string;\r\n  activities: ActivityItem[];\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    hasMore: boolean;\r\n  };\r\n  filters: {\r\n    types?: string[];\r\n    platforms?: string[];\r\n    dateRange?: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface AccountPostsResponse {\r\n  accountId: string;\r\n  posts: Post[];\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    hasMore: boolean;\r\n  };\r\n  filters: {\r\n    platforms?: string[];\r\n    status?: string[];\r\n    dateRange?: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n  };\r\n}\r\n\r\n// ===== MEDIA HANDLING INTERFACES =====\r\n\r\nexport interface MediaNormalizationOptions {\r\n  maxSize?: number; // in bytes\r\n  allowedTypes?: string[];\r\n  quality?: number; // for images/videos\r\n  thumbnailSize?: { width: number; height: number };\r\n}\r\n\r\nexport interface NormalizedMedia {\r\n  type: 'image' | 'video' | 'audio' | 'document';\r\n  data: string; // base64 encoded\r\n  mimeType: string;\r\n  size: number;\r\n  thumbnail?: string; // base64 encoded thumbnail\r\n  metadata: {\r\n    width?: number;\r\n    height?: number;\r\n    duration?: number;\r\n    originalName?: string;\r\n  };\r\n}\r\n\r\n// ===== ERROR HANDLING INTERFACES =====\r\n\r\nexport interface CrosspostError {\r\n  code: string;\r\n  message: string;\r\n  details?: Record<string, any>;\r\n  statusCode?: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface RequestOverride {\r\n  authToken?: string;\r\n  accountId?: string;\r\n  timeout?: number;\r\n  headers?: Record<string, string>;\r\n}\r\n\r\nexport interface ClientConfig {\r\n  baseUrl: string;\r\n  accountId: string;\r\n  timeout?: number;\r\n}\r\n\r\nexport class CrosspostPluginClient {\r\n  private client: AxiosInstance;\r\n  private authConfig: AuthConfig | null = null;\r\n  private accountId: string;\r\n\r\n  constructor(config: ClientConfig | string = 'https://api.opencrosspost.com/') {\r\n    // Handle both string (legacy) and object config\r\n    const clientConfig = typeof config === 'string' \r\n      ? { baseUrl: config, accountId: '' }\r\n      : config;\r\n\r\n    this.accountId = clientConfig.accountId;\r\n    \r\n    this.client = axios.create({\r\n      baseURL: clientConfig.baseUrl,\r\n      timeout: clientConfig.timeout || 30000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add request interceptor for NEAR auth\r\n    this.client.interceptors.request.use((config) => {\r\n      // For GET requests, use X-Near-Account header\r\n      if (config.method === 'get') {\r\n        config.headers['X-Near-Account'] = this.accountId;\r\n      }\r\n      \r\n      // For POST/DELETE requests, use Authorization Bearer with NEAR signature\r\n      if (config.method === 'post' || config.method === 'delete') {\r\n        if (this.authConfig?.nearSignature) {\r\n          config.headers.Authorization = `Bearer ${this.authConfig.nearSignature}`;\r\n        }\r\n        // Still include account ID for context\r\n        config.headers['X-Near-Account'] = this.accountId;\r\n      }\r\n      \r\n      return config;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set NEAR authentication configuration\r\n   */\r\n  setAuth(config: AuthConfig): void {\r\n    this.authConfig = config;\r\n    this.accountId = config.accountId;\r\n    \r\n    if (config.baseUrl) {\r\n      this.client.defaults.baseURL = config.baseUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set account ID for GET requests\r\n   */\r\n  setAccountId(accountId: string): void {\r\n    this.accountId = accountId;\r\n  }\r\n\r\n  /**\r\n   * Check plugin health status (GET request)\r\n   */\r\n  async health(): Promise<HealthResponse> {\r\n    try {\r\n      const response: AxiosResponse<HealthResponse> = await this.client.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      return {\r\n        status: 'error',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current authentication status\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return this.authConfig !== null && !!this.authConfig.nearSignature && !!this.accountId;\r\n  }\r\n\r\n  /**\r\n   * Clear authentication\r\n   */\r\n  clearAuth(): void {\r\n    this.authConfig = null;\r\n  }\r\n\r\n  /**\r\n   * Get current account ID\r\n   */\r\n  getAccountId(): string {\r\n    return this.accountId;\r\n  }\r\n\r\n  // ===== SYSTEM API =====\r\n\r\n  /**\r\n   * Get rate limits for all endpoints\r\n   */\r\n  async getRateLimits(): Promise<RateLimitsResponse> {\r\n    try {\r\n      const response: AxiosResponse<RateLimitsResponse> = await this.client.get('/api/rate-limits');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get rate limits: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get rate limit for a specific endpoint\r\n   */\r\n  async getEndpointRateLimit(endpoint: string): Promise<EndpointRateLimitResponse> {\r\n    try {\r\n      const response: AxiosResponse<EndpointRateLimitResponse> = await this.client.get(`/api/rate-limits/${encodeURIComponent(endpoint)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get rate limit for endpoint ${endpoint}: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  // ===== AUTH API =====\r\n\r\n  /**\r\n   * Authorize NEAR account with signature\r\n   */\r\n  async authorizeNearAccount(signature: string, accountId: string): Promise<LoginResponse> {\r\n    try {\r\n      const response: AxiosResponse<LoginResponse> = await this.client.post('/api/auth/authorize-near', {\r\n        signature,\r\n        accountId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to authorize NEAR account: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get NEAR authorization status\r\n   */\r\n  async getNearAuthorizationStatus(): Promise<NearAuthorizationStatus> {\r\n    try {\r\n      const response: AxiosResponse<NearAuthorizationStatus> = await this.client.get('/api/auth/near-status');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get NEAR authorization status: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login to platform\r\n   */\r\n  async loginToPlatform(platform: string, credentials: Record<string, any>): Promise<LoginResponse> {\r\n    try {\r\n      const response: AxiosResponse<LoginResponse> = await this.client.post('/api/auth/login', {\r\n        platform,\r\n        credentials\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to login to platform ${platform}: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   */\r\n  async refreshToken(): Promise<RefreshTokenResponse> {\r\n    try {\r\n      const response: AxiosResponse<RefreshTokenResponse> = await this.client.post('/api/auth/refresh');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to refresh token: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh user profile data\r\n   */\r\n  async refreshProfile(): Promise<ProfileData> {\r\n    try {\r\n      const response: AxiosResponse<ProfileData> = await this.client.get('/api/auth/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to refresh profile: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get authentication status\r\n   */\r\n  async getAuthStatus(): Promise<AuthStatus> {\r\n    try {\r\n      const response: AxiosResponse<AuthStatus> = await this.client.get('/api/auth/status');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get auth status: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revoke authentication\r\n   */\r\n  async revokeAuth(): Promise<{ success: boolean; message?: string }> {\r\n    try {\r\n      const response: AxiosResponse<{ success: boolean; message?: string }> = await this.client.post('/api/auth/revoke');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to revoke auth: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connected accounts\r\n   */\r\n  async getConnectedAccounts(): Promise<ConnectedAccount[]> {\r\n    try {\r\n      const response: AxiosResponse<ConnectedAccount[]> = await this.client.get('/api/auth/connected-accounts');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get connected accounts: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  // ===== POST API =====\r\n\r\n  /**\r\n   * Create a new post\r\n   */\r\n  async createPost(request: CreatePostRequest): Promise<CreatePostResponse> {\r\n    try {\r\n      const response: AxiosResponse<CreatePostResponse> = await this.client.post('/api/posts', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to create post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Repost an existing post\r\n   */\r\n  async repost(request: RepostRequest): Promise<CreatePostResponse> {\r\n    try {\r\n      const response: AxiosResponse<CreatePostResponse> = await this.client.post('/api/posts/repost', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to repost: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Quote post (repost with comment)\r\n   */\r\n  async quotePost(request: QuotePostRequest): Promise<CreatePostResponse> {\r\n    try {\r\n      const response: AxiosResponse<CreatePostResponse> = await this.client.post('/api/posts/quote', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to quote post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reply to a post\r\n   */\r\n  async replyToPost(request: ReplyToPostRequest): Promise<CreatePostResponse> {\r\n    try {\r\n      const response: AxiosResponse<CreatePostResponse> = await this.client.post('/api/posts/reply', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to reply to post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Like a post\r\n   */\r\n  async likePost(request: LikePostRequest): Promise<{ success: boolean; message?: string }> {\r\n    try {\r\n      const response: AxiosResponse<{ success: boolean; message?: string }> = await this.client.post('/api/posts/like', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to like post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlike a post\r\n   */\r\n  async unlikePost(request: LikePostRequest): Promise<{ success: boolean; message?: string }> {\r\n    try {\r\n      const response: AxiosResponse<{ success: boolean; message?: string }> = await this.client.post('/api/posts/unlike', request);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to unlike post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a post\r\n   */\r\n  async deletePost(request: DeletePostRequest): Promise<{ success: boolean; message?: string }> {\r\n    try {\r\n      const response: AxiosResponse<{ success: boolean; message?: string }> = await this.client.delete('/api/posts', { data: request });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to delete post: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  // ===== ACTIVITY API =====\r\n\r\n  /**\r\n   * Get leaderboard\r\n   */\r\n  async getLeaderboard(period: 'daily' | 'weekly' | 'monthly' | 'all-time' = 'weekly', limit: number = 50): Promise<LeaderboardResponse> {\r\n    try {\r\n      const response: AxiosResponse<LeaderboardResponse> = await this.client.get('/api/activity/leaderboard', {\r\n        params: { period, limit }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get leaderboard: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get account activity\r\n   */\r\n  async getAccountActivity(\r\n    accountId: string,\r\n    options: {\r\n      page?: number;\r\n      limit?: number;\r\n      types?: string[];\r\n      platforms?: string[];\r\n      dateRange?: { start: string; end: string };\r\n    } = {}\r\n  ): Promise<AccountActivityResponse> {\r\n    try {\r\n      const response: AxiosResponse<AccountActivityResponse> = await this.client.get(`/api/activity/account/${accountId}`, {\r\n        params: options\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get account activity: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get account posts\r\n   */\r\n  async getAccountPosts(\r\n    accountId: string,\r\n    options: {\r\n      page?: number;\r\n      limit?: number;\r\n      platforms?: string[];\r\n      status?: string[];\r\n      dateRange?: { start: string; end: string };\r\n    } = {}\r\n  ): Promise<AccountPostsResponse> {\r\n    try {\r\n      const response: AxiosResponse<AccountPostsResponse> = await this.client.get(`/api/activity/account/${accountId}/posts`, {\r\n        params: options\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get account posts: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  // ===== MEDIA HANDLING =====\r\n\r\n  /**\r\n   * Normalize media from various sources (Blob, File, URL, base64)\r\n   */\r\n  async normalizeMedia(\r\n    media: Blob | File | string | ArrayBuffer,\r\n    options: MediaNormalizationOptions = {}\r\n  ): Promise<NormalizedMedia> {\r\n    const {\r\n      maxSize = 10 * 1024 * 1024, // 10MB default\r\n      allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'video/mp4', 'video/webm', 'audio/mp3', 'audio/wav'],\r\n      quality = 0.8,\r\n      thumbnailSize = { width: 300, height: 300 }\r\n    } = options;\r\n\r\n    try {\r\n      let data: string;\r\n      let mimeType: string;\r\n      let size: number;\r\n      let metadata: NormalizedMedia['metadata'] = {};\r\n\r\n      if (typeof media === 'string') {\r\n        // Handle URL or base64 string\r\n        if (media.startsWith('data:')) {\r\n          // Base64 data URL\r\n          const [header, base64Data] = media.split(',');\r\n          mimeType = header.match(/data:([^;]+)/)?.[1] || 'application/octet-stream';\r\n          data = base64Data;\r\n          size = Math.floor(base64Data.length * 0.75); // Approximate size\r\n        } else {\r\n          // URL - fetch and convert\r\n          const response = await fetch(media);\r\n          const blob = await response.blob();\r\n          mimeType = blob.type;\r\n          size = blob.size;\r\n          data = await this.blobToBase64(blob);\r\n        }\r\n      } else if (media instanceof Blob || media instanceof File) {\r\n        // Handle Blob or File\r\n        mimeType = media.type;\r\n        size = media.size;\r\n        data = await this.blobToBase64(media);\r\n        \r\n        if (media instanceof File) {\r\n          metadata.originalName = media.name;\r\n        }\r\n      } else if (media instanceof ArrayBuffer) {\r\n        // Handle ArrayBuffer\r\n        const blob = new Blob([media]);\r\n        mimeType = blob.type;\r\n        size = blob.size;\r\n        data = await this.blobToBase64(blob);\r\n      } else {\r\n        throw new Error('Unsupported media type');\r\n      }\r\n\r\n      // Validate size\r\n      if (size > maxSize) {\r\n        throw new Error(`Media size (${size} bytes) exceeds maximum allowed size (${maxSize} bytes)`);\r\n      }\r\n\r\n      // Validate type\r\n      if (!allowedTypes.includes(mimeType)) {\r\n        throw new Error(`Media type ${mimeType} is not allowed`);\r\n      }\r\n\r\n      // Determine media type category\r\n      let type: NormalizedMedia['type'];\r\n      if (mimeType.startsWith('image/')) {\r\n        type = 'image';\r\n      } else if (mimeType.startsWith('video/')) {\r\n        type = 'video';\r\n      } else if (mimeType.startsWith('audio/')) {\r\n        type = 'audio';\r\n      } else {\r\n        type = 'document';\r\n      }\r\n\r\n      // Generate thumbnail for images and videos\r\n      let thumbnail: string | undefined;\r\n      if (type === 'image' || type === 'video') {\r\n        try {\r\n          thumbnail = await this.generateThumbnail(data, mimeType, thumbnailSize);\r\n        } catch (error) {\r\n          console.warn('Failed to generate thumbnail:', error);\r\n        }\r\n      }\r\n\r\n      return {\r\n        type,\r\n        data,\r\n        mimeType,\r\n        size,\r\n        thumbnail,\r\n        metadata\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to normalize media: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Blob to base64\r\n   */\r\n  private async blobToBase64(blob: Blob): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        resolve(result.split(',')[1]); // Remove data:type;base64, prefix\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate thumbnail for media\r\n   */\r\n  private async generateThumbnail(\r\n    base64Data: string,\r\n    mimeType: string,\r\n    size: { width: number; height: number }\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        if (!ctx) {\r\n          reject(new Error('Failed to get canvas context'));\r\n          return;\r\n        }\r\n\r\n        // Calculate thumbnail dimensions maintaining aspect ratio\r\n        const aspectRatio = img.width / img.height;\r\n        let { width, height } = size;\r\n        \r\n        if (aspectRatio > 1) {\r\n          height = width / aspectRatio;\r\n        } else {\r\n          width = height * aspectRatio;\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        // Draw and compress\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        const thumbnail = canvas.toDataURL('image/jpeg', 0.8);\r\n        resolve(thumbnail.split(',')[1]); // Remove data:type;base64, prefix\r\n      };\r\n      \r\n      img.onerror = () => reject(new Error('Failed to load image for thumbnail'));\r\n      img.src = `data:${mimeType};base64,${base64Data}`;\r\n    });\r\n  }\r\n\r\n  // ===== ERROR HANDLING & REQUEST OVERRIDES =====\r\n\r\n  /**\r\n   * Create a request with per-request overrides\r\n   */\r\n  private createRequestWithOverrides(override?: RequestOverride) {\r\n    const client = axios.create({\r\n      baseURL: this.client.defaults.baseURL,\r\n      timeout: override?.timeout || this.client.defaults.timeout,\r\n      headers: {\r\n        ...this.client.defaults.headers,\r\n        ...override?.headers,\r\n      },\r\n    });\r\n\r\n    // Add request interceptor for overrides\r\n    client.interceptors.request.use((config) => {\r\n      // For GET requests, use X-Near-Account header\r\n      if (config.method === 'get') {\r\n        config.headers['X-Near-Account'] = override?.accountId || this.accountId;\r\n      }\r\n      \r\n      // For POST/DELETE requests, use Authorization Bearer with NEAR signature\r\n      if (config.method === 'post' || config.method === 'delete') {\r\n        if (override?.authToken) {\r\n          config.headers.Authorization = `Bearer ${override.authToken}`;\r\n        } else if (this.authConfig?.nearSignature) {\r\n          config.headers.Authorization = `Bearer ${this.authConfig.nearSignature}`;\r\n        }\r\n        // Still include account ID for context\r\n        config.headers['X-Near-Account'] = override?.accountId || this.accountId;\r\n      }\r\n      \r\n      return config;\r\n    });\r\n\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Map API errors to consistent CrosspostError format\r\n   */\r\n  private mapError(error: any): CrosspostError {\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    if (error.response) {\r\n      // API responded with error status\r\n      const { status, data } = error.response;\r\n      return {\r\n        code: data?.code || `HTTP_${status}`,\r\n        message: data?.message || error.message || `HTTP ${status} Error`,\r\n        details: data?.details || { status, url: error.config?.url },\r\n        statusCode: status,\r\n        timestamp,\r\n      };\r\n    } else if (error.request) {\r\n      // Network error\r\n      return {\r\n        code: 'NETWORK_ERROR',\r\n        message: 'Network request failed',\r\n        details: { url: error.config?.url },\r\n        timestamp,\r\n      };\r\n    } else {\r\n      // Other error\r\n      return {\r\n        code: 'UNKNOWN_ERROR',\r\n        message: error.message || 'Unknown error occurred',\r\n        timestamp,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute request with error mapping and optional overrides\r\n   */\r\n  private async executeRequest<T>(\r\n    requestFn: (client: AxiosInstance) => Promise<AxiosResponse<T>>,\r\n    override?: RequestOverride\r\n  ): Promise<T> {\r\n    try {\r\n      const client = override ? this.createRequestWithOverrides(override) : this.client;\r\n      const response = await requestFn(client);\r\n      return response.data;\r\n    } catch (error) {\r\n      const crosspostError = this.mapError(error);\r\n      throw crosspostError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Health check with overrides\r\n   */\r\n  async healthWithOverrides(override?: RequestOverride): Promise<HealthResponse> {\r\n    return this.executeRequest(\r\n      (client) => client.get('/health'),\r\n      override\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create post with overrides\r\n   */\r\n  async createPostWithOverrides(\r\n    request: CreatePostRequest,\r\n    override?: RequestOverride\r\n  ): Promise<CreatePostResponse> {\r\n    return this.executeRequest(\r\n      (client) => client.post('/api/posts', request),\r\n      override\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get rate limits with overrides\r\n   */\r\n  async getRateLimitsWithOverrides(override?: RequestOverride): Promise<RateLimitsResponse> {\r\n    return this.executeRequest(\r\n      (client) => client.get('/api/rate-limits'),\r\n      override\r\n    );\r\n  }\r\n}\r\n","export { \r\n  CrosspostPluginClient, \r\n  type AuthConfig, \r\n  type HealthResponse, \r\n  type ClientConfig,\r\n  type RateLimitInfo,\r\n  type RateLimitsResponse,\r\n  type EndpointRateLimitResponse,\r\n  type ConnectedAccount,\r\n  type AuthStatus,\r\n  type NearAuthorizationStatus,\r\n  type LoginResponse,\r\n  type RefreshTokenResponse,\r\n  type ProfileData,\r\n  type MediaItem,\r\n  type PostContent,\r\n  type CreatePostRequest,\r\n  type Post,\r\n  type CreatePostResponse,\r\n  type RepostRequest,\r\n  type QuotePostRequest,\r\n  type ReplyToPostRequest,\r\n  type LikePostRequest,\r\n  type DeletePostRequest,\r\n  type LeaderboardEntry,\r\n  type LeaderboardResponse,\r\n  type ActivityItem,\r\n  type AccountActivityResponse,\r\n  type AccountPostsResponse,\r\n  type MediaNormalizationOptions,\r\n  type NormalizedMedia,\r\n  type CrosspostError,\r\n  type RequestOverride\r\n} from './client';\r\n\r\n// Plugin configuration interface\r\nexport interface CrosspostPluginConfig {\r\n  name: string;\r\n  version: string;\r\n  description: string;\r\n}\r\n\r\n// Default plugin configuration\r\nexport const pluginConfig: CrosspostPluginConfig = {\r\n  name: 'crosspost-plugin',\r\n  version: '1.0.0',\r\n  description: 'Crosspost plugin for content distribution',\r\n};\r\n\r\n// Plugin initialization function\r\nexport function initializePlugin(config?: Partial<CrosspostPluginConfig>): CrosspostPluginClient {\r\n  const finalConfig = { ...pluginConfig, ...config };\r\n  console.log(`Initializing ${finalConfig.name} v${finalConfig.version}`);\r\n  \r\n  return new CrosspostPluginClient();\r\n}\r\n\r\n// Default export for module federation\r\nexport default {\r\n  CrosspostPluginClient,\r\n  initializePlugin,\r\n  pluginConfig,\r\n};\r\n"],"names":["CrosspostPluginClient","config","clientConfig","baseUrl","accountId","client","baseURL","timeout","headers","interceptors","request","use","method","authConfig","nearSignature","Authorization","defaults","error","get","response","data","status","message","Error","timestamp","Date","toISOString","endpoint","encodeURIComponent","signature","post","platform","credentials","delete","period","limit","params","options","media","maxSize","allowedTypes","quality","thumbnailSize","mimeType","size","metadata","header","base64Data","blob","type","thumbnail","width","height","startsWith","split","match","Math","floor","length","fetch","blobToBase64","Blob","File","originalName","name","ArrayBuffer","includes","generateThumbnail","console","warn","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","img","Image","canvas","document","createElement","ctx","getContext","aspectRatio","drawImage","toDataURL","src","override","authToken","code","details","url","statusCode","requestFn","createRequestWithOverrides","mapError","executeRequest","pluginConfig","version","description","initializePlugin","finalConfig","log"],"mappings":"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"}