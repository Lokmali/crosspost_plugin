// üîÑ Crosspost SDK Migration Example
// This shows exactly how to migrate from @crosspost/sdk to your plugin

// ===== BEFORE (Old @crosspost/sdk) =====
/*
import { CrosspostClient } from '@crosspost/sdk';

const client = new CrosspostClient({
  apiKey: 'your-api-key',
  baseUrl: 'https://api.opencrosspost.com/'
});

// Usage
const health = await client.health();
const accounts = await client.getConnectedAccounts();
const post = await client.createPost({
  content: { text: 'Hello!' },
  platforms: ['twitter']
});
*/

// ===== AFTER (Your Plugin) =====

// Option 1: Module Federation (Recommended for production)
import { CrosspostPluginClient } from 'crosspostPlugin/plugin';

// Option 2: Direct Import (Alternative)
// import { CrosspostPluginClient } from './dist/main.js';

// Initialize client
const client = new CrosspostPluginClient({
  baseUrl: 'https://api.opencrosspost.com/',
  accountId: 'your.near'  // Required for GET requests
});

// Set NEAR authentication (required for POST/DELETE)
client.setAuth({
  nearSignature: 'your_near_signature',
  accountId: 'your.near'
});

// ===== VERIFICATION TESTS =====

async function testMigration() {
  console.log('üß™ Testing migration...');
  
  try {
    // Test 1: Health check (GET request)
    console.log('1Ô∏è‚É£ Testing health()...');
    const health = await client.health();
    console.log('‚úÖ Health:', health);
  } catch (error) {
    console.log('‚ùå Health test failed:', error.message);
  }
  
  try {
    // Test 2: Get connected accounts (GET request)
    console.log('2Ô∏è‚É£ Testing getConnectedAccounts()...');
    const accounts = await client.getConnectedAccounts();
    console.log('‚úÖ Connected accounts:', accounts);
  } catch (error) {
    console.log('‚ùå Accounts test failed:', error.message);
  }
  
  try {
    // Test 3: Create post (POST request - requires NEAR signature)
    console.log('3Ô∏è‚É£ Testing createPost()...');
    const post = await client.createPost({
      content: {
        text: 'Hello from NEAR!',
        media: []
      },
      platforms: ['twitter']
    });
    console.log('‚úÖ Post created:', post);
  } catch (error) {
    console.log('‚ùå Post creation failed:', error.message);
  }
  
  try {
    // Test 4: Get leaderboard (GET request)
    console.log('4Ô∏è‚É£ Testing getLeaderboard()...');
    const leaderboard = await client.getLeaderboard('weekly', 10);
    console.log('‚úÖ Leaderboard:', leaderboard);
  } catch (error) {
    console.log('‚ùå Leaderboard test failed:', error.message);
  }
}

// ===== HOST APPLICATION SETUP =====

// For Module Federation, add to your webpack config:
/*
module.exports = {
  plugins: [
    new ModuleFederationPlugin({
      name: 'host',
      remotes: {
        crosspostPlugin: 'crosspostPlugin@http://localhost:3999/remoteEntry.js'
      }
    })
  ]
};
*/

// ===== PRODUCTION DEPLOYMENT =====

// 1. Build your plugin
// npm run build

// 2. Copy files to your CDN/server
// cp dist/main.js your-cdn/
// cp dist/remoteEntry.js your-cdn/

// 3. Update Module Federation URL
// crosspostPlugin: 'crosspostPlugin@https://your-cdn.com/remoteEntry.js'

// ===== MIGRATION CHECKLIST =====

console.log(`
‚úÖ Migration Checklist:
‚ñ° Replace import: @crosspost/sdk ‚Üí crosspostPlugin/plugin
‚ñ° Update initialization: add accountId, remove apiKey
‚ñ° Add setAuth() call with NEAR signature
‚ñ° Test health() endpoint
‚ñ° Test getConnectedAccounts() endpoint  
‚ñ° Test createPost() endpoint
‚ñ° Test one activity endpoint
‚ñ° Update webpack config for Module Federation
‚ñ° Deploy to production
‚ñ° Remove @crosspost/sdk dependency
`);

// Run the test
// testMigration();
